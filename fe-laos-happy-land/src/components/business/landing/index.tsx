"use client";

import { useState, useEffect } from "react";
import Link from "next/link";

const LandingPage = () => {
  const [searchType, setSearchType] = useState("mua");
  const [propertyType, setPropertyType] = useState("all");
  const [location, setLocation] = useState("");
  const [priceRange, setPriceRange] = useState("");
  const [currentSlide, setCurrentSlide] = useState(0);

  // Background gradients for carousel as fallback
  const backgroundGradients = [
    "linear-gradient(135deg, #667eea 0%, #764ba2 100%)", // Blue to purple
    "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)", // Pink to red  
    "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)", // Blue to cyan
    "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"  // Green to teal
  ];
  // Auto-slide carousel
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % 4); // 4 gradients
    }, 5000);
    return () => clearInterval(timer);
  }, []);

  const searchTabs = [
    { id: "mua", label: "Nh√† ƒë·∫•t b√°n", icon: "üè†" },
    { id: "thue", label: "Nh√† ƒë·∫•t cho thu√™", icon: "üîë" },
    { id: "du-an", label: "D·ª± √°n", icon: "üèóÔ∏è" },
  ];

  const propertyTypes = [
    { id: "all", label: "T·∫•t c·∫£ nh√† ƒë·∫•t" },
    { id: "can-ho-chung-cu", label: "CƒÉn h·ªô chung c∆∞" },
    { id: "nha-rieng", label: "Nh√† ri√™ng" },
    { id: "nha-biet-thu", label: "Nh√† bi·ªát th·ª±, li·ªÅn k·ªÅ" },
    { id: "nha-mat-pho", label: "Nh√† m·∫∑t ph·ªë" },
    { id: "shophouse", label: "Shophouse, nh√† ph·ªë th∆∞∆°ng m·∫°i" },
    { id: "dat-nen", label: "ƒê·∫•t n·ªÅn d·ª± √°n" },
    { id: "ban-dat", label: "B√°n ƒë·∫•t" },
    { id: "trang-trai", label: "Trang tr·∫°i, khu ngh·ªâ d∆∞·ª°ng" },
    { id: "condotel", label: "Condotel" },
    { id: "kho-nha-xuong", label: "Kho, nh√† x∆∞·ªüng" },
    { id: "loai-khac", label: "Lo·∫°i kh√°c" },
  ];

  const priceRanges = [
    { id: "", label: "M·ª©c gi√°" },
    { id: "under-500m", label: "D∆∞·ªõi 500 tri·ªáu" },
    { id: "500m-800m", label: "500 - 800 tri·ªáu" },
    { id: "800m-1b", label: "800 tri·ªáu - 1 t·ª∑" },
    { id: "1b-2b", label: "1 - 2 t·ª∑" },
    { id: "2b-3b", label: "2 - 3 t·ª∑" },
    { id: "3b-5b", label: "3 - 5 t·ª∑" },
    { id: "5b-7b", label: "5 - 7 t·ª∑" },
    { id: "7b-10b", label: "7 - 10 t·ª∑" },
    { id: "10b-20b", label: "10 - 20 t·ª∑" },
    { id: "20b-30b", label: "20 - 30 t·ª∑" },
    { id: "above-30b", label: "Tr√™n 30 t·ª∑" },
    { id: "deal", label: "Th·ªèa thu·∫≠n" },
  ];

  const featuredProperties = [
    {
      id: 1,
      title: "CƒÉn h·ªô cao c·∫•p t·∫°i trung t√¢m Vientiane",
      location: "Vientiane",
      price: "2.5 t·ª∑ LAK",
      area: "85 m¬≤",
      bedrooms: 2,
      bathrooms: 2,
      image: "bg-gradient-to-r from-blue-400 to-blue-600",
      type: "CƒÉn h·ªô",
      featured: true,
    },
    {
      id: 2,
      title: "Nh√† ph·ªë 3 t·∫ßng g·∫ßn Mekong",
      location: "Luang Prabang",
      price: "1.8 t·ª∑ LAK",
      area: "120 m¬≤",
      bedrooms: 3,
      bathrooms: 3,
      image: "bg-gradient-to-r from-green-400 to-green-600",
      type: "Nh√† ph·ªë",
      featured: false,
    },
    {
      id: 3,
      title: "ƒê·∫•t th·ªï c∆∞ m·∫∑t ti·ªÅn ƒë∆∞·ªùng l·ªõn",
      location: "Pakse",
      price: "800 tri·ªáu LAK",
      area: "200 m¬≤",
      bedrooms: 0,
      bathrooms: 0,
      image: "bg-gradient-to-r from-yellow-400 to-orange-500",
      type: "ƒê·∫•t",
      featured: true,
    },
    {
      id: 4,
      title: "Villa sang tr·ªçng view s√¥ng",
      location: "Vientiane",
      price: "5.2 t·ª∑ LAK",
      area: "300 m¬≤",
      bedrooms: 4,
      bathrooms: 4,
      image: "bg-gradient-to-r from-purple-400 to-purple-600",
      type: "Villa",
      featured: true,
    },
  ];

  const newsItems = [
    {
      id: 1,
      title: "Th·ªã tr∆∞·ªùng b·∫•t ƒë·ªông s·∫£n L√†o tƒÉng tr∆∞·ªüng m·∫°nh trong Q3/2025",
      excerpt: "Theo b√°o c√°o m·ªõi nh·∫•t, th·ªã tr∆∞·ªùng BDS L√†o ƒë·∫°t m·ª©c tƒÉng tr∆∞·ªüng 15% so v·ªõi c√πng k·ª≥ nƒÉm tr∆∞·ªõc...",
      date: "8 th√°ng 8, 2025",
      category: "Th·ªã tr∆∞·ªùng",
    },
    {
      id: 2,
      title: "Xu h∆∞·ªõng ƒë·∫ßu t∆∞ BDS t·∫°i khu v·ª±c Mekong",
      excerpt: "C√°c chuy√™n gia d·ª± b√°o khu v·ª±c ven s√¥ng Mekong s·∫Ω l√† ƒëi·ªÉm n√≥ng trong th·ªùi gian t·ªõi...",
      date: "5 th√°ng 8, 2025",
      category: "ƒê·∫ßu t∆∞",
    },
    {
      id: 3,
      title: "Ch√≠nh s√°ch m·ªõi v·ªÅ s·ªü h·ªØu BDS cho ng∆∞·ªùi n∆∞·ªõc ngo√†i",
      excerpt: "Ch√≠nh ph·ªß L√†o c√¥ng b·ªë nh·ªØng ƒëi·ªÅu ch·ªânh quan tr·ªçng trong quy ƒë·ªãnh s·ªü h·ªØu b·∫•t ƒë·ªông s·∫£n...",
      date: "2 th√°ng 8, 2025",
      category: "Ph√°p l√Ω",
    },
  ];

  return (
    <div className="min-h-screen bg-white">
      {/* Hero Section with Carousel Background */}
      <section className="relative h-96 overflow-hidden">
        {/* Carousel Background */}
        <div className="absolute inset-0">
          {backgroundGradients.map((gradient, index) => (
            <div
              key={index}
              className={`absolute inset-0 transition-opacity duration-1000 ${
                index === currentSlide ? "opacity-100" : "opacity-0"
              }`}
              style={{
                background: gradient,
              }}
            />
          ))}
          {/* Dark overlay */}
        </div>

        {/* Carousel Navigation Dots */}
        <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-2 z-20">
          {backgroundGradients.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentSlide(index)}
              className={`w-3 h-3 rounded-full transition-all ${
                index === currentSlide ? "bg-white" : "bg-white/50"
              }`}
            />
          ))}
        </div>

        {/* Search Form Container - Positioned over carousel */}
        <div className="relative z-10 container mx-auto px-4 pt-12">
          <div className="max-w-5xl mx-auto">
            {/* Search Tabs */}
            <div className="flex mb-6">
              {searchTabs.map((tab, index) => (
                <button
                  key={tab.id}
                  onClick={() => setSearchType(tab.id)}
                  className={`px-6 py-3 text-sm font-medium transition-all ${
                    searchType === tab.id
                      ? "bg-white text-black"
                      : "bg-gray-800 text-white hover:bg-gray-700"
                  } ${index === 0 ? "rounded-l-lg" : ""} ${index === searchTabs.length - 1 ? "rounded-r-lg" : ""}`}
                >
                  {tab.label}
                </button>
              ))}
            </div>

            {/* Search Form */}
            <div className="bg-white rounded-lg shadow-xl p-6">
              {/* Search Input Row */}
              <div className="flex gap-4 mb-4">
                <div className="flex-1">
                  <div className="relative">
                    <input
                      type="text"
                      placeholder="Tr√™n to√†n qu·ªëc"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg text-sm focus:ring-1 focus:ring-red-500 focus:border-red-500 pl-10"
                    />
                    <svg
                      className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                      />
                    </svg>
                  </div>
                </div>
                
                <button className="bg-red-500 hover:bg-red-600 text-white font-medium py-3 px-8 rounded-lg text-sm transition-colors whitespace-nowrap">
                  T√¨m ki·∫øm
                </button>
              </div>

              {/* Dropdown Row */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <select
                  value={propertyType}
                  onChange={(e) => setPropertyType(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg text-sm focus:ring-1 focus:ring-red-500 focus:border-red-500 appearance-none bg-white"
                >
                  <option value="">Lo·∫°i h√¨nh d·ª± √°n</option>
                  {propertyTypes.map((type) => (
                    <option key={type.id} value={type.id}>
                      {type.label}
                    </option>
                  ))}
                </select>

                <select
                  value={priceRange}
                  onChange={(e) => setPriceRange(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg text-sm focus:ring-1 focus:ring-red-500 focus:border-red-500 appearance-none bg-white"
                >
                  <option value="">M·ª©c gi√°</option>
                  {priceRanges.map((range) => (
                    <option key={range.id} value={range.id}>
                      {range.label}
                    </option>
                  ))}
                </select>

                <select
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg text-sm focus:ring-1 focus:ring-red-500 focus:border-red-500 appearance-none bg-white"
                >
                  <option value="">Tr·∫°ng th√°i</option>
                  <option value="sap-mo-ban">S·∫Øp m·ªü b√°n</option>
                  <option value="dang-mo-ban">ƒêang m·ªü b√°n</option>
                  <option value="sap-ban-giao">S·∫Øp b√†n giao</option>
                  <option value="da-ban-giao">ƒê√£ b√†n giao</option>
                </select>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Featured Properties */}
      <section className="py-8 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              B·∫•t ƒë·ªông s·∫£n d√†nh cho b·∫°n
            </h2>
            <p className="text-gray-600">
              Kh√°m ph√° nh·ªØng cƒÉn h·ªô, nh√† ƒë·∫•t ch·∫•t l∆∞·ª£ng t·∫°i c√°c khu v·ª±c n·ªïi b·∫≠t
            </p>
          </div>

          {/* Property Filter Tabs */}
          <div className="mb-6">
            <div className="flex flex-wrap gap-2">
              {["T·∫•t c·∫£", "CƒÉn h·ªô/Chung c∆∞", "Nh√† ri√™ng", "ƒê·∫•t n·ªÅn", "Bi·ªát th·ª±"].map((filter) => (
                <button
                  key={filter}
                  className="px-4 py-2 text-sm border border-gray-300 rounded hover:border-red-500 hover:text-red-500 transition-colors"
                >
                  {filter}
                </button>
              ))}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {featuredProperties.map((property) => (
              <div key={property.id} className="bg-white rounded shadow hover:shadow-md transition-shadow group">
                <div className="relative">
                  <div className={`h-40 ${property.image} rounded-t`}></div>
                  {property.featured && (
                    <div className="absolute top-2 left-2">
                      <span className="bg-red-500 text-white px-2 py-1 rounded text-xs font-medium">
                        N·ªïi b·∫≠t
                      </span>
                    </div>
                  )}
                  <div className="absolute top-2 right-2">
                    <button className="w-7 h-7 bg-white/90 rounded-full flex items-center justify-center hover:bg-white transition-colors">
                      <svg className="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                    </button>
                  </div>
                </div>
                
                <div className="p-3">
                  <h3 className="font-medium text-gray-900 mb-2 text-sm line-clamp-2 group-hover:text-red-500 transition-colors">
                    {property.title}
                  </h3>
                  
                  <div className="text-red-500 font-bold mb-2 text-sm">
                    {property.price}
                  </div>
                  
                  <div className="flex items-center justify-between text-xs text-gray-500 mb-2">
                    <span className="flex items-center gap-1">
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                      {property.location}
                    </span>
                    <span className="flex items-center gap-1">
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16" />
                      </svg>
                      {property.area}
                    </span>
                  </div>

                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <div className="flex items-center gap-3">
                      {property.bedrooms > 0 && (
                        <span className="flex items-center gap-1">
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2 2z" />
                          </svg>
                          {property.bedrooms} PN
                        </span>
                      )}
                      {property.bathrooms > 0 && (
                        <span className="flex items-center gap-1">
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 14v3a2 2 0 002 2h4a2 2 0 002-2v-3" />
                          </svg>
                          {property.bathrooms} WC
                        </span>
                      )}
                    </div>
                    <span className="text-orange-500 font-medium">{property.type}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Load More Button */}
          <div className="text-center mt-6">
            <button className="px-6 py-2 border border-red-500 text-red-500 rounded hover:bg-red-500 hover:text-white transition-colors">
              Xem th√™m
            </button>
          </div>
        </div>
      </section>

      {/* Project Section */}
      <section className="py-8 bg-white">
        <div className="container mx-auto px-4">
          <div className="mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              D·ª± √°n b·∫•t ƒë·ªông s·∫£n
            </h2>
            <p className="text-gray-600">
              Kh√°m ph√° c√°c d·ª± √°n ƒëang m·ªü b√°n
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {[1, 2, 3].map((project) => (
              <div key={project} className="bg-white rounded shadow hover:shadow-md transition-shadow">
                <div className="h-48 bg-gradient-to-r from-green-400 to-blue-500 rounded-t"></div>
                <div className="p-4">
                  <h3 className="font-bold text-gray-900 mb-2">
                    D·ª± √°n Vinhomes Smart City L√†o
                  </h3>
                  <p className="text-gray-600 text-sm mb-2">
                    Khu ƒë√¥ th·ªã th√¥ng minh t·∫°i Vientiane
                  </p>
                  <div className="text-red-500 font-bold mb-2">
                    T·ª´ 1.2 t·ª∑ LAK
                  </div>
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>üèóÔ∏è ƒêang x√¢y d·ª±ng</span>
                    <span>üìÖ B√†n giao Q4/2025</span>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="text-center mt-6">
            <button className="px-6 py-2 border border-red-500 text-red-500 rounded hover:bg-red-500 hover:text-white transition-colors">
              Xem t·∫•t c·∫£ d·ª± √°n
            </button>
          </div>
        </div>
      </section>

      {/* Statistics */}
      <section className="py-8 bg-orange-500 text-white">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div>
              <div className="text-2xl md:text-3xl font-bold mb-1">100,000+</div>
              <div className="text-orange-100 text-sm">Tin ƒëƒÉng</div>
            </div>
            <div>
              <div className="text-2xl md:text-3xl font-bold mb-1">5,000+</div>
              <div className="text-orange-100 text-sm">M√¥i gi·ªõi</div>
            </div>
            <div>
              <div className="text-2xl md:text-3xl font-bold mb-1">10,000+</div>
              <div className="text-orange-100 text-sm">Kh√°ch h√†ng</div>
            </div>
            <div>
              <div className="text-2xl md:text-3xl font-bold mb-1">500+</div>
              <div className="text-orange-100 text-sm">D·ª± √°n</div>
            </div>
          </div>
        </div>
      </section>

      {/* News Section */}
      <section className="py-8 bg-gray-50">
        <div className="container mx-auto px-4">
          <div className="mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              Tin t·ª©c th·ªã tr∆∞·ªùng
            </h2>
            <p className="text-gray-600">
              C·∫≠p nh·∫≠t th√¥ng tin m·ªõi nh·∫•t v·ªÅ b·∫•t ƒë·ªông s·∫£n
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {newsItems.map((news) => (
              <article key={news.id} className="bg-white rounded shadow hover:shadow-md transition-shadow">
                <div className="h-32 bg-gradient-to-r from-gray-400 to-gray-600 rounded-t"></div>
                <div className="p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <span className="bg-orange-100 text-orange-800 px-2 py-1 rounded text-xs font-medium">
                      {news.category}
                    </span>
                    <span className="text-gray-500 text-xs">{news.date}</span>
                  </div>
                  <h3 className="font-medium text-gray-900 mb-2 text-sm line-clamp-2 hover:text-red-500 transition-colors">
                    {news.title}
                  </h3>
                  <p className="text-gray-600 text-xs line-clamp-2 mb-3">
                    {news.excerpt}
                  </p>
                  <Link
                    href={`/news/${news.id}`}
                    className="text-red-500 hover:text-red-700 font-medium text-xs flex items-center gap-1"
                  >
                    ƒê·ªçc th√™m
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </Link>
                </div>
              </article>
            ))}
          </div>

          <div className="text-center mt-6">
            <button className="px-6 py-2 border border-red-500 text-red-500 rounded hover:bg-red-500 hover:text-white transition-colors">
              Xem t·∫•t c·∫£ tin t·ª©c
            </button>
          </div>
        </div>
      </section>

      {/* Services */}
      <section className="py-8 bg-white">
        <div className="container mx-auto px-4">
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              T·∫°i sao ch·ªçn Laos Happy Land?
            </h2>
            <p className="text-gray-600">
              Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn d·ªãch v·ª• t·ªët nh·∫•t
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center p-4">
              <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="font-bold mb-2">Tin c·∫≠y & Minh b·∫°ch</h3>
              <p className="text-gray-600 text-sm">
                Th√¥ng tin ch√≠nh x√°c, ph√°p l√Ω r√µ r√†ng
              </p>
            </div>

            <div className="text-center p-4">
              <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <h3 className="font-bold mb-2">Nhanh ch√≥ng</h3>
              <p className="text-gray-600 text-sm">
                T√¨m ki·∫øm v√† ƒëƒÉng tin d·ªÖ d√†ng
              </p>
            </div>

            <div className="text-center p-4">
              <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M12 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="font-bold mb-2">H·ªó tr·ª£ 24/7</h3>
              <p className="text-gray-600 text-sm">
                ƒê·ªôi ng≈© t∆∞ v·∫•n chuy√™n nghi·ªáp
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-8 bg-gradient-to-r from-red-500 to-orange-500 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-2xl md:text-3xl font-bold mb-3">
            B·∫°n ƒëang c√≥ b·∫•t ƒë·ªông s·∫£n c·∫ßn b√°n/cho thu√™?
          </h2>
          <p className="text-lg text-red-100 mb-6">
            ƒêƒÉng tin mi·ªÖn ph√≠ - Ti·∫øp c·∫≠n h√†ng tri·ªáu kh√°ch h√†ng ti·ªÅm nƒÉng
          </p>
          <div className="flex flex-col sm:flex-row gap-3 justify-center max-w-md mx-auto">
            <button className="bg-white text-red-500 hover:bg-gray-100 font-medium py-3 px-6 rounded transition-colors">
              ƒêƒÉng tin mi·ªÖn ph√≠
            </button>
            <button className="border-2 border-white text-white hover:bg-white hover:text-red-500 font-medium py-3 px-6 rounded transition-colors">
              T∆∞ v·∫•n mi·ªÖn ph√≠
            </button>
          </div>
        </div>
      </section>
    </div>
  );
};

export default LandingPage;
